# handlers/admin.py

import html
from datetime import timedelta
from aiogram import Router, Bot, types
from aiogram.filters import Command
from aiogram.enums import ChatMemberStatus
from aiogram.utils.markdown import hbold
from aiogram.types import ChatPermissions

from db.requests import (
    update_chat_setting, add_warning, count_warnings, get_chat_settings, 
    remove_last_warning, clear_warnings, add_stop_word, delete_stop_word, 
    get_stop_words, get_or_create_user_profile, count_user_messages
)
from utils.time_parser import parse_time
from .callbacks import get_settings_keyboard
from .utils import is_admin 
from .filters import stop_words_cache
router = Router()

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

async def is_admin(message: types.Message, bot: Bot) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –æ—Ç–≤–µ—Ç–æ–º."""
    if message.chat.type == 'private':
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return False
    member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if member.status not in {ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR}:
        await message.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
        return False
    return True

async def process_warning(message: types.Message, user_to_warn: types.User, bot: Bot, log_action_func: callable):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏ –≤–∞—Ä–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –±–∞–Ω."""
    chat_id = message.chat.id
    user_id = user_to_warn.id
    
    await add_warning(user_id, chat_id)
    warnings_count = await count_warnings(user_id, chat_id)
    
    settings = await get_chat_settings(chat_id)
    warn_limit = settings.get('warn_limit', 3)
    
    admin_mention = message.from_user.mention_html()
    user_mention = user_to_warn.mention_html()

    if warnings_count >= warn_limit:
        try:
            await bot.ban_chat_member(chat_id, user_id, until_date=timedelta(days=1))
            await message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention} –ø–æ–ª—É—á–∏–ª {warnings_count} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ 1 –¥–µ–Ω—å.", parse_mode="HTML")
            log_text = (f"üö´ <b>–ê–≤—Ç–æ-–±–∞–Ω</b>\n<b>–ê–¥–º–∏–Ω:</b> {admin_mention}\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_mention} (<code>{user_id}</code>)\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π ({warnings_count}/{warn_limit})")
            await log_action_func(chat_id, log_text, bot)
        except Exception as e:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_mention}. –í–æ–∑–º–æ–∂–Ω–æ, —É –º–µ–Ω—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", parse_mode="HTML")
    else:
        await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_mention} –≤—ã–Ω–µ—Å–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ({warnings_count}/{warn_limit}).", parse_mode="HTML")
        log_text = (f"‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b>\n<b>–ê–¥–º–∏–Ω:</b> {admin_mention}\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_mention} (<code>{user_id}</code>)\n<b>–°—á–µ—Ç—á–∏–∫:</b> {warnings_count}/{warn_limit}")
        await log_action_func(chat_id, log_text, bot)

# --- –ö–û–ú–ê–ù–î–´ ---

@router.message(Command("settings"))
async def cmd_settings(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    settings = await get_chat_settings(chat_id)
    user_warnings = await count_warnings(user_id, chat_id)
    warn_limit = settings.get('warn_limit', 3)
    text = (f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"‚Ä¢ –í–∞—à–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: <code>{user_warnings} / {warn_limit}</code>\n"
            f"‚Ä¢ –õ–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ —á–∞—Ç–µ: <code>{warn_limit}</code>\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤):")
    keyboard = await get_settings_keyboard(chat_id)
    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

@router.message(Command("warn"))
async def cmd_warn(message: types.Message, bot: Bot, log_action: callable):
    if not await is_admin(message, bot): return
    if not message.reply_to_message:
        return await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    user_to_warn = message.reply_to_message.from_user
    await process_warning(message, user_to_warn, bot, log_action)
    await message.delete()

@router.message(Command("unwarn"))
async def cmd_unwarn(message: types.Message, bot: Bot, log_action: callable):
    if not await is_admin(message, bot): return
    if not message.reply_to_message:
        return await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    user_to_unwarn = message.reply_to_message.from_user
    if await remove_last_warning(user_to_unwarn.id, message.chat.id):
        warnings_count = await count_warnings(user_to_unwarn.id, message.chat.id)
        await message.answer(f"‚úÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è {user_to_unwarn.mention_html()} —Å–Ω—è—Ç–æ. –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {warnings_count}.", parse_mode="HTML")
        
        log_text = (f"‚úÖ <b>–°–Ω—è—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b>\n"
                    f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.mention_html()}\n"
                    f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_to_unwarn.mention_html()} (<code>{user_to_unwarn.id}</code>)")
        await log_action(message.chat.id, log_text, bot)
    else:
        await message.answer(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_to_unwarn.mention_html()} –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.", parse_mode="HTML")
    await message.delete()

@router.message(Command("clearwarns"))
async def cmd_clearwarns(message: types.Message, bot: Bot, log_action: callable):
    if not await is_admin(message, bot): return
    if not message.reply_to_message:
        return await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    target_user = message.reply_to_message.from_user
    await clear_warnings(target_user.id, message.chat.id)
    await message.answer(f"‚úÖ –í—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user.mention_html()} –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã.", parse_mode="HTML")

    log_text = (f"üóë <b>–û—á–∏—â–µ–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è</b>\n"
                f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.mention_html()}\n"
                f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {target_user.mention_html()} (<code>{target_user.id}</code>)")
    await log_action(message.chat.id, log_text, bot)

@router.message(Command("mute"))
async def cmd_mute(message: types.Message, bot: Bot, log_action: callable):
    if not await is_admin(message, bot): return
    if not message.reply_to_message:
        return await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    try:
        args = message.text.split()
        user_to_mute = message.reply_to_message.from_user
        time_str = args[1] if len(args) > 1 else "1h"
        duration = parse_time(time_str)
        if not duration:
            return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.")
        
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=user_to_mute.id,
            permissions=ChatPermissions(can_send_messages=False),
            until_date=duration
        )
        await message.answer(f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_mute.mention_html()} –∑–∞–º—É—á–µ–Ω –Ω–∞ {time_str}.", parse_mode="HTML")

        log_text = (f"üîá <b>–ú—É—Ç</b>\n"
                    f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.mention_html()}\n"
                    f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_to_mute.mention_html()} (<code>{user_to_mute.id}</code>)\n"
                    f"<b>–°—Ä–æ–∫:</b> {time_str}")
        await log_action(message.chat.id, log_text, bot)

        await message.delete()
    except Exception as e:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


@router.message(Command("unmute"))
async def cmd_unmute(message: types.Message, bot: Bot, log_action: callable):
    if not await is_admin(message, bot): return
    if not message.reply_to_message:
        return await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        
    user_to_unmute = message.reply_to_message.from_user
    await bot.restrict_chat_member(
        chat_id=message.chat.id,
        user_id=user_to_unmute.id,
        permissions=ChatPermissions(
            can_send_messages=True, can_send_media_messages=True,
            can_send_other_messages=True, can_add_web_page_previews=True
        )
    )
    await message.answer(f"üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_unmute.mention_html()} —Ä–∞–∑–º—É—á–µ–Ω.", parse_mode="HTML")

    log_text = (f"üîä <b>–†–∞–∑–º—É—Ç</b>\n"
                f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.mention_html()}\n"
                f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_to_unmute.mention_html()} (<code>{user_to_unmute.id}</code>)")
    await log_action(message.chat.id, log_text, bot)

    await message.delete()


@router.message(Command("ban"))
async def cmd_ban(message: types.Message, bot: Bot, log_action: callable):
    if not await is_admin(message, bot): return
    if not message.reply_to_message:
        return await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    try:
        args = message.text.split()
        user_to_ban = message.reply_to_message.from_user
        time_str = args[1] if len(args) > 1 else "1d"
        reason = " ".join(args[2:]) if len(args) > 2 else "–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã"
        duration = parse_time(time_str)
        if not duration:
            return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.")
        
        await bot.ban_chat_member(message.chat.id, user_to_ban.id, until_date=duration)
        await message.answer(
            f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_ban.mention_html()} –∑–∞–±–∞–Ω–µ–Ω.\n"
            f"<b>–°—Ä–æ–∫:</b> {time_str}\n"
            f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}",
            parse_mode="HTML"
        )
        log_text = (f"üö´ <b>–†—É—á–Ω–æ–π –±–∞–Ω</b>\n"
                    f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.mention_html()}\n"
                    f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_to_ban.mention_html()} (<code>{user_to_ban.id}</code>)\n"
                    f"<b>–°—Ä–æ–∫:</b> {time_str}\n"
                    f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {html.escape(reason)}")
        await log_action(message.chat.id, log_text, bot)

        await message.delete()
        await message.reply_to_message.delete()
    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

@router.message(Command("unban"))
async def cmd_unban(message: types.Message, bot: Bot, log_action: callable):
    if not await is_admin(message, bot): return
    if not message.reply_to_message:
        return await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    try:
        user_to_unban = message.reply_to_message.from_user
        await bot.unban_chat_member(chat_id=message.chat.id, user_id=user_to_unban.id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_unban.mention_html()} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω.", parse_mode="HTML")
        
        log_text = (f"‚úÖ <b>–†—É—á–Ω–æ–π —Ä–∞–∑–±–∞–Ω</b>\n"
                    f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.mention_html()}\n"
                    f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_to_unban.mention_html()} (<code>{user_to_unban.id}</code>)")
        await log_action(message.chat.id, log_text, bot)

        await message.delete()
    except Exception as e:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@router.message(Command("add_word"))
async def cmd_add_word(message: types.Message, bot: Bot, log_action: callable):
    if not await is_admin(message, bot): return
    try:
        word = message.text.split(maxsplit=1)[1].lower()
        if await add_stop_word(message.chat.id, word):
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            if message.chat.id not in stop_words_cache:
                stop_words_cache[message.chat.id] = set()
            stop_words_cache[message.chat.id].add(word)

            await message.answer(f"‚úÖ –°–ª–æ–≤–æ {hbold(word)} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.", parse_mode="HTML")
            log_text = (f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–æ</b>\n"
                        f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.mention_html()}\n"
                        f"<b>–°–ª–æ–≤–æ:</b> <code>{html.escape(word)}</code>")
            await log_action(message.chat.id, log_text, bot)
        else:
            await message.answer("–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")
    except IndexError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")

@router.message(Command("del_word"))
async def cmd_del_word(message: types.Message, bot: Bot, log_action: callable):
    if not await is_admin(message, bot): return
    try:
        word = message.text.split(maxsplit=1)[1].lower()
        if await delete_stop_word(message.chat.id, word):
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            if message.chat.id in stop_words_cache:
                stop_words_cache[message.chat.id].discard(word)

            await message.answer(f"‚úÖ –°–ª–æ–≤–æ {hbold(word)} —É–¥–∞–ª–µ–Ω–æ –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.", parse_mode="HTML")
            log_text = (f"‚ûñ <b>–£–¥–∞–ª–µ–Ω–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–æ</b>\n"
                        f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.mention_html()}\n"
                        f"<b>–°–ª–æ–≤–æ:</b> <code>{html.escape(word)}</code>")
            await log_action(message.chat.id, log_text, bot)
        else:
            await message.answer("–¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")
    except IndexError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")

@router.message(Command("list_words"))
async def cmd_list_words(message: types.Message, bot: Bot):
    if not await is_admin(message, bot): return
    words = await get_stop_words(message.chat.id)
    if not words:
        return await message.answer("–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø—É—Å—Ç.")
    text = "–¢–µ–∫—É—â–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞:\n\n" + "\n".join(f"‚Ä¢ <code>{html.escape(word)}</code>" for word in words)
    await message.answer(text, parse_mode="HTML")

@router.message(Command("set_welcome"))
async def cmd_set_welcome(message: types.Message, bot: Bot, log_action: callable):
    if not await is_admin(message, bot): return
    welcome_text = message.text.split(maxsplit=1)
    if len(welcome_text) < 2:
        return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
    
    text_to_save = welcome_text[1]
    await update_chat_setting(message.chat.id, 'welcome_message', text_to_save)
    await message.answer("‚úÖ –ù–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    
    log_text = (f"‚öôÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ</b>\n"
                f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.mention_html()}\n"
                f"<b>–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:</b>\n<code>{html.escape(text_to_save)}</code>")
    await log_action(message.chat.id, log_text, bot)

@router.message(Command("info"))
async def cmd_info(message: types.Message, bot: Bot):
    if not await is_admin(message, bot): return
    if not message.reply_to_message:
        return await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    target_user = message.reply_to_message.from_user
    chat_id = message.chat.id
    profile = await get_or_create_user_profile(target_user.id, chat_id)
    warnings_count = await count_warnings(target_user.id, chat_id)
    message_count = await count_user_messages(target_user.id, chat_id)
    text = [
        f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b> {target_user.mention_html()}",
        f"<b>ID:</b> <code>{target_user.id}</code>",
        f"<b>–†–µ–ø—É—Ç–∞—Ü–∏—è:</b> {profile.reputation}",
        f"<b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</b> {warnings_count}",
        f"<b>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {message_count}"
    ]
    await message.answer("\n".join(text), parse_mode="HTML")
