import html
import logging
import asyncio
from aiogram import Router, F, types, Bot
from aiogram.enums import ChatMemberStatus
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import hbold

from db.requests import (
    get_chat_settings, update_chat_setting, get_stop_words, 
    add_stop_word, delete_stop_word, get_all_notes, add_note, delete_note,
    get_all_triggers, add_trigger, delete_trigger
)
from states import SettingsStates
from .filters import stop_words_cache, triggers_cache

router = Router()

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–∞ –∫—ç—à–∞ –∏–∑ filters.py
from .filters import stop_words_cache, triggers_cache

router = Router()

VERIFIED_USERS = {}


# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ê–í–¢–û-–£–î–ê–õ–ï–ù–ò–Ø ---
async def delete_message_after_delay(message: types.Message, delay: int):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏."""
    await asyncio.sleep(delay)
    try:
        await message.delete()
    except Exception:
        pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
# --- –§–ê–ë–†–ò–ö–ò –ö–õ–ê–í–ò–ê–¢–£–† (–°–æ–∑–¥–∞—Ç–µ–ª–∏ –º–µ–Ω—é) ---

async def get_main_settings_keyboard(chat_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="menu:rules"),
        InlineKeyboardButton(text="üõ°Ô∏è –ê–Ω—Ç–∏—Å–ø–∞–º", callback_data="menu:antispam")
    )
    builder.row(
        InlineKeyboardButton(text="üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data="menu:welcome"),
        InlineKeyboardButton(text="üåä –ê–Ω—Ç–∏—Ñ–ª—É–¥", callback_data="menu:antiflood")
    )
    builder.row(
        InlineKeyboardButton(text="üö™ –ü—Ä–æ—â–∞–Ω–∏–µ", callback_data="menu:goodbye"),
        InlineKeyboardButton(text="üß† –ö–∞–ø—á–∞", callback_data="menu:captcha")
    )
    builder.row(
        InlineKeyboardButton(text="‚ùóÔ∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", callback_data="menu:warns"),
        InlineKeyboardButton(text="üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏", callback_data="menu:blocks")
    )
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å", callback_data="menu:close"),
        InlineKeyboardButton(text="‚û°Ô∏è –î—Ä—É–≥–∏–µ", callback_data="menu:other")
    )
    return builder.as_markup()

async def get_rules_menu(chat_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞–º–∏."""
    settings = await get_chat_settings(chat_id)
    rules_text = settings.get('rules_text', '–ü—Ä–∞–≤–∏–ª–∞ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.')
    text = (f"üìú **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º–∏**\n\n–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞:\n<i>{html.escape(rules_text)}</i>")
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞", callback_data="action:change_rules"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main"))
    return text, builder.as_markup()

async def get_welcome_menu(chat_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º."""
    settings = await get_chat_settings(chat_id)
    welcome_text = settings.get('welcome_message', "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_mention}!")
    text = (f"üëã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º**\n\n–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n<code>{html.escape(welcome_text)}</code>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>{user_mention}</code> –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="action:change_welcome"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main"))
    return text, builder.as_markup()

async def get_goodbye_menu(chat_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—â–∞–Ω–∏–µ–º."""
    settings = await get_chat_settings(chat_id)
    goodbye_text = settings.get('goodbye_message', "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.")
    text = (f"üö™ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—â–∞–Ω–∏–µ–º**\n\n–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n<code>{html.escape(goodbye_text)}</code>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>{user_mention}</code> –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="action:change_goodbye"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main"))
    return text, builder.as_markup()

async def get_antispam_menu(chat_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–Ω—Ç–∏—Å–ø–∞–º–∞."""
    settings = await get_chat_settings(chat_id)
    antilink_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if settings.get('antilink_enabled', False) else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞"
    text = "üõ°Ô∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞**"
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text=f"–ó–∞—â–∏—Ç–∞ –æ—Ç —Å—Å—ã–ª–æ–∫: {antilink_status}", callback_data="action:toggle_antilink"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main"))
    return text, builder.as_markup()

async def get_captcha_menu(chat_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–ø—á–∏."""
    settings = await get_chat_settings(chat_id)
    captcha_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if settings.get('captcha_enabled', False) else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞"
    captcha_timeout = settings.get('captcha_timeout', 60)
    text = "üß† **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ CAPTCHA**"
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text=f"CAPTCHA –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤: {captcha_status}", callback_data="action:toggle_captcha"))
    builder.add(InlineKeyboardButton(text=f"–¢–∞–π–º–∞—É—Ç: {captcha_timeout} —Å–µ–∫.", callback_data="action:change_captcha_timeout"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main"))
    builder.adjust(1)
    return text, builder.as_markup()

async def get_warns_menu(chat_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π."""
    settings = await get_chat_settings(chat_id)
    warn_limit = settings.get('warn_limit', 3)
    text = f"‚ùóÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π**\n\n–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç –≤–∞—Ä–Ω–æ–≤ –¥–æ –±–∞–Ω–∞: <b>{warn_limit}</b>"
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç", callback_data="action:change_warn_limit"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main"))
    return text, builder.as_markup()

async def get_blocks_menu():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫."""
    text = (
        "üö´ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏**\n\n"
        "–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        "‚Ä¢ <code>/mute &lt;–≤—Ä–µ–º—è&gt;</code> - –∑–∞–º—É—Ç–∏—Ç—å (1h, 10m, 2d)\n"
        "‚Ä¢ <code>/unmute</code> - —Ä–∞–∑–º—É—Ç–∏—Ç—å\n"
        "‚Ä¢ <code>/ban &lt;–≤—Ä–µ–º—è&gt;</code> - –∑–∞–±–∞–Ω–∏—Ç—å\n"
        "‚Ä¢ <code>/unban</code> - —Ä–∞–∑–±–∞–Ω–∏—Ç—å"
    )
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main"))
    return text, builder.as_markup()

async def get_notes_menu(chat_id: int):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –∑–∞–º–µ—Ç–æ–∫."""
    notes = await get_all_notes(chat_id)
    text = "üóíÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏**\n\n–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫:\n"
    if notes:
        text += "\n".join(f"‚Ä¢ <code>#{html.escape(note)}</code>" for note in notes)
    else:
        text += "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="action:add_note"),
        InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data="action:del_note")
    )
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:content"))
    return text, builder.as_markup()

async def get_triggers_menu(chat_id: int):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤."""
    triggers = await get_all_triggers(chat_id)
    text = "ü§ñ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏**\n\n–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫:\n"
    if triggers:
        text += "\n".join(f"‚Ä¢ <code>{html.escape(keyword)}</code>" for keyword in triggers)
    else:
        text += "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="action:add_trigger"),
        InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data="action:del_trigger")
    )
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:content"))
    return text, builder.as_markup()

async def get_stopwords_menu(chat_id: int):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é —Å—Ç–æ–ø-—Å–ª–æ–≤."""
    words = await get_stop_words(chat_id)
    text = "üö´ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞–º–∏**\n\n–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫:\n"
    if words:
        text += "\n".join(f"‚Ä¢ <code>{html.escape(word)}</code>" for word in words)
    else:
        text += "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="action:add_stopword"),
        InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data="action:del_stopword")
    )
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:content"))
    return text, builder.as_markup()


async def get_moderation_settings_keyboard(chat_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∞–Ω—Ç–∏—Å–ø–∞–º, –∫–∞–ø—á—É –∏ –≤–∞—Ä–Ω—ã)."""
    settings = await get_chat_settings(chat_id)
    antilink_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if settings.get('antilink_enabled', False) else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞"
    captcha_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if settings.get('captcha_enabled', False) else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞"
    captcha_timeout = settings.get('captcha_timeout', 60)
    warn_limit = settings.get('warn_limit', 3)
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text=f"–õ–∏–º–∏—Ç –≤–∞—Ä–Ω–æ–≤: {warn_limit}", callback_data="action:change_warn_limit"))
    builder.add(InlineKeyboardButton(text=f"–ó–∞—â–∏—Ç–∞ –æ—Ç —Å—Å—ã–ª–æ–∫: {antilink_status}", callback_data="action:toggle_antilink"))
    builder.add(InlineKeyboardButton(text=f"CAPTCHA –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤: {captcha_status}", callback_data="action:toggle_captcha"))
    builder.add(InlineKeyboardButton(text=f"–¢–∞–π–º–∞—É—Ç CAPTCHA: {captcha_timeout} —Å–µ–∫.", callback_data="action:change_captcha_timeout"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main"))
    builder.adjust(1)
    return builder.as_markup()


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–í–ò–ì–ê–¶–ò–ò –ü–û –ú–ï–ù–Æ ---

@router.callback_query(F.data.startswith("menu:"))
async def handle_menu_navigation(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    menu_type = callback.data.split(":")[1]
    chat_id = callback.message.chat.id

    text, keyboard = "–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", None
    if menu_type == "main":
        text = "PARAMETRY\n<b>–ì—Ä—É–ø–ø–∞:</b> {chat_title}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.".format(chat_title=html.escape(callback.message.chat.title))
        keyboard = await get_main_settings_keyboard(chat_id)
    elif menu_type == "rules":
        text, keyboard = await get_rules_menu(chat_id)
    elif menu_type == "welcome":
        text, keyboard = await get_welcome_menu(chat_id)
    elif menu_type == "goodbye":
        text, keyboard = await get_goodbye_menu(chat_id)
    elif menu_type == "antispam":
        text, keyboard = await get_antispam_menu(chat_id)
    elif menu_type == "captcha":
        text, keyboard = await get_captcha_menu(chat_id)
    elif menu_type == "warns":
        text, keyboard = await get_warns_menu(chat_id)
    elif menu_type == "blocks":
        text, keyboard = await get_blocks_menu()
    elif menu_type == "notes":
        text, keyboard = await get_notes_menu(chat_id)
    elif menu_type == "triggers":
        text, keyboard = await get_triggers_menu(chat_id)
    elif menu_type == "stopwords":
        text, keyboard = await get_stopwords_menu(chat_id)
    elif menu_type == "close":
        await callback.message.delete()
        return await callback.answer()
    else: # –ó–∞–≥–ª—É—à–∫–∞
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main"))
        keyboard = builder.as_markup()

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()



# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–ï–ô–°–¢–í–ò–ô –ò–ó –ú–ï–ù–Æ ---

@router.callback_query(F.data.startswith("action:"))
async def handle_menu_actions(callback: types.CallbackQuery, state: FSMContext, bot: Bot, log_action: callable):
    member = await bot.get_chat_member(callback.message.chat.id, callback.from_user.id)
    if member.status not in {ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR}:
        return await callback.answer("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.", show_alert=True)

    action = callback.data.split(":")[1]
    chat_id = callback.message.chat.id

    prompts = {
        "change_rules": ("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª.", SettingsStates.waiting_for_rules_text),
        "change_welcome": ("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.", SettingsStates.waiting_for_welcome_message),
        "change_goodbye": ("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ—â–∞–Ω–∏—è.", SettingsStates.waiting_for_goodbye_message),
        "change_warn_limit": ("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ª–∏–º–∏—Ç–∞ –≤–∞—Ä–Ω–æ–≤.", SettingsStates.waiting_for_warn_limit),
        "change_captcha_timeout": ("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –∫–∞–ø—á–∏ (10-300).", SettingsStates.waiting_for_captcha_timeout),
        "add_stopword": ("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.", SettingsStates.waiting_for_stop_word_to_add),
        "del_stopword": ("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.", SettingsStates.waiting_for_stop_word_to_delete),
        "add_note": ("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏ (–æ–¥–Ω–æ —Å–ª–æ–≤–æ –±–µ–∑ #).", SettingsStates.waiting_for_note_name_to_add),
        "del_note": ("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–±–µ–∑ #).", SettingsStates.waiting_for_note_name_to_delete),
        "add_trigger": ('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞.', SettingsStates.waiting_for_trigger_keyword_to_add),
        "del_trigger": ('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—É—é —Ñ—Ä–∞–∑—É —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.', SettingsStates.waiting_for_trigger_keyword_to_delete),
    }

    if action in prompts:
        prompt_text, new_state = prompts[action]
        await state.update_data(menu_message_id=callback.message.message_id)
        await callback.message.edit_text(prompt_text)
        await state.set_state(new_state)
    
    elif action in ["toggle_antilink", "toggle_captcha"]:
        setting_name = "antilink_enabled" if action == "toggle_antilink" else "captcha_enabled"
        settings = await get_chat_settings(chat_id)
        new_status = not settings.get(setting_name, False)
        await update_chat_setting(chat_id, setting_name, new_status)
        
        setting_name_rus = "–ó–∞—â–∏—Ç–∞ –æ—Ç —Å—Å—ã–ª–æ–∫" if action == "toggle_antilink" else "CAPTCHA"
        status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
        log_text = (f"‚öôÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {setting_name_rus}</b>\n"
                    f"<b>–ê–¥–º–∏–Ω:</b> {callback.from_user.mention_html()}\n"
                    f"<b>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b> {status_text}")
        await log_action(chat_id, log_text, bot)
        
        if action == "toggle_antilink":
            _, new_keyboard = await get_antispam_menu(chat_id)
            await callback.message.edit_reply_markup(reply_markup=new_keyboard)
        else:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ –¥–æ–∂–∏–¥–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –ø–æ—Ç–æ–º –±–µ—Ä–µ–º —ç–ª–µ–º–µ–Ω—Ç
            _, new_keyboard = await get_captcha_menu(chat_id)
            await callback.message.edit_reply_markup(reply_markup=new_keyboard)

    await callback.answer()



# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–°–¢–û–Ø–ù–ò–ô (FSM) ---
async def return_to_menu(message: types.Message, state: FSMContext, menu_func: callable, bot: Bot):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    data = await state.get_data()
    menu_message_id = data.get("menu_message_id")
    await state.clear()

    await message.delete()

    if menu_message_id:
        text, keyboard = await menu_func(message.chat.id)
        try:
            await bot.edit_message_text(
                text=text, chat_id=message.chat.id, message_id=menu_message_id,
                parse_mode="HTML", reply_markup=keyboard
            )
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é: {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ.")
            await message.answer(text, parse_mode="HTML", reply_markup=keyboard)


@router.message(SettingsStates.waiting_for_rules_text)
async def process_new_rules_text(message: types.Message, state: FSMContext, bot: Bot, log_action: callable):
    new_text = message.html_text
    await update_chat_setting(message.chat.id, 'rules_text', new_text)
    confirmation_msg = await message.answer("‚úÖ –ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    asyncio.create_task(delete_message_after_delay(confirmation_msg, 5))

    log_text = (f"‚öôÔ∏è <b>–û–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞</b>\n"
                f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.mention_html()}")
    await log_action(message.chat.id, log_text, bot)
    
    await return_to_menu(message, state, get_rules_menu, bot)

@router.message(SettingsStates.waiting_for_goodbye_message)
async def process_new_goodbye_message(message: types.Message, state: FSMContext, bot: Bot, log_action: callable):
    new_text = message.html_text
    await update_chat_setting(message.chat.id, 'goodbye_message', new_text)
    confirmation_msg = await message.answer("‚úÖ –ù–æ–≤–æ–µ –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    asyncio.create_task(delete_message_after_delay(confirmation_msg, 5))

    log_text = (f"‚öôÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–æ –ø—Ä–æ—â–∞–Ω–∏–µ</b>\n"
                f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.mention_html()}")
    await log_action(message.chat.id, log_text, bot)
    
    await return_to_menu(message, state, get_goodbye_menu, bot)

@router.message(SettingsStates.waiting_for_captcha_timeout)
async def process_new_captcha_timeout(message: types.Message, state: FSMContext, bot: Bot, log_action: callable):
    if not message.text.isdigit() or not (10 <= int(message.text) <= 300):
        error_msg = await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 300 —Å–µ–∫—É–Ω–¥.")
        asyncio.create_task(delete_message_after_delay(error_msg, 5))
        return
    
    timeout = int(message.text)
    await update_chat_setting(message.chat.id, 'captcha_timeout', timeout)
    confirmation_msg = await message.answer(f"‚úÖ –¢–∞–π–º–∞—É—Ç –¥–ª—è –∫–∞–ø—á–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {timeout} —Å–µ–∫—É–Ω–¥.")
    asyncio.create_task(delete_message_after_delay(confirmation_msg, 5))
    
    log_text = (f"‚öôÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω —Ç–∞–π–º–∞—É—Ç CAPTCHA</b>\n"
                f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.mention_html()}\n"
                f"<b>–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> {timeout} —Å–µ–∫.")
    await log_action(message.chat.id, log_text, bot)

    await return_to_menu(message, state, get_captcha_menu, bot)

@router.message(SettingsStates.waiting_for_warn_limit)
async def process_new_warn_limit(message: types.Message, state: FSMContext, bot: Bot, log_action: callable):
    if not message.text.isdigit() or int(message.text) < 1:
        error_msg = await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.")
        asyncio.create_task(delete_message_after_delay(error_msg, 5))
        return
    
    limit = int(message.text)
    await update_chat_setting(message.chat.id, 'warn_limit', limit)
    confirmation_msg = await message.answer(f"‚úÖ –õ–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {hbold(limit)}.", parse_mode="HTML")
    asyncio.create_task(delete_message_after_delay(confirmation_msg, 5))

    log_text = (f"‚öôÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω –ª–∏–º–∏—Ç –≤–∞—Ä–Ω–æ–≤</b>\n"
                f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.mention_html()}\n"
                f"<b>–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> {limit}")
    await log_action(message.chat.id, log_text, bot)
    
    await return_to_menu(message, state, get_warns_menu, bot)


@router.message(SettingsStates.waiting_for_welcome_message)
async def process_new_welcome_message(message: types.Message, state: FSMContext, bot: Bot, log_action: callable):
    new_text = message.html_text
    await update_chat_setting(message.chat.id, 'welcome_message', new_text)
    confirmation_msg = await message.answer("‚úÖ –ù–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    asyncio.create_task(delete_message_after_delay(confirmation_msg, 5))

    log_text = (f"‚öôÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ</b>\n"
                f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.mention_html()}")
    await log_action(message.chat.id, log_text, bot)
    
    await return_to_menu(message, state, get_welcome_menu, bot)

@router.message(SettingsStates.waiting_for_stop_word_to_add)
async def process_add_stop_word(message: types.Message, state: FSMContext, bot: Bot, log_action: callable):
    word = message.text.lower()
    if await add_stop_word(message.chat.id, word):
        stop_words_cache[message.chat.id] = set(await get_stop_words(message.chat.id))
        confirmation_msg = await message.answer(f"‚úÖ –°–ª–æ–≤–æ <code>{html.escape(word)}</code> –¥–æ–±–∞–≤–ª–µ–Ω–æ.", parse_mode="HTML")
        asyncio.create_task(delete_message_after_delay(confirmation_msg, 5))
        
        log_text = (f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–æ</b>\n"
                    f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.mention_html()}\n"
                    f"<b>–°–ª–æ–≤–æ:</b> <code>{html.escape(word)}</code>")
        await log_action(message.chat.id, log_text, bot)
    else:
        error_msg = await message.answer("–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")
        asyncio.create_task(delete_message_after_delay(error_msg, 5))
    
    await return_to_menu(message, state, get_stopwords_menu, bot)

@router.message(SettingsStates.waiting_for_stop_word_to_delete)
async def process_del_stop_word(message: types.Message, state: FSMContext, bot: Bot, log_action: callable):
    word = message.text.lower()
    if await delete_stop_word(message.chat.id, word):
        stop_words_cache[message.chat.id] = set(await get_stop_words(message.chat.id))
        confirmation_msg = await message.answer(f"‚úÖ –°–ª–æ–≤–æ <code>{html.escape(word)}</code> —É–¥–∞–ª–µ–Ω–æ.", parse_mode="HTML")
        asyncio.create_task(delete_message_after_delay(confirmation_msg, 5))
        
        log_text = (f"‚ûñ <b>–£–¥–∞–ª–µ–Ω–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–æ</b>\n"
                    f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.mention_html()}\n"
                    f"<b>–°–ª–æ–≤–æ:</b> <code>{html.escape(word)}</code>")
        await log_action(message.chat.id, log_text, bot)
    else:
        error_msg = await message.answer("–¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")
        asyncio.create_task(delete_message_after_delay(error_msg, 5))
        
    await return_to_menu(message, state, get_stopwords_menu, bot)

@router.message(SettingsStates.waiting_for_note_name_to_add)
async def process_add_note_name(message: types.Message, state: FSMContext):
    await state.update_data(note_name=message.text.lower().split()[0])
    await message.delete() # –£–¥–∞–ª—è–µ–º –∏–º—è –∑–∞–º–µ—Ç–∫–∏
    menu_message_id = (await state.get_data()).get("menu_message_id")
    await bot.edit_message_text("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏.", chat_id=message.chat.id, message_id=menu_message_id)
    await state.set_state(SettingsStates.waiting_for_note_content)

@router.message(SettingsStates.waiting_for_note_content)
async def process_add_note_content(message: types.Message, state: FSMContext, bot: Bot, log_action: callable):
    data = await state.get_data()
    name = data['note_name']
    content = message.html_text
    
    is_new = await add_note(message.chat.id, name, content)
    status = "—Å–æ–∑–¥–∞–Ω–∞" if is_new else "–æ–±–Ω–æ–≤–ª–µ–Ω–∞"
    confirmation_msg = await message.answer(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ `#{name}` —É—Å–ø–µ—à–Ω–æ {status}.")
    asyncio.create_task(delete_message_after_delay(confirmation_msg, 5))
    
    log_text = (f"üìù <b>{status.capitalize()} –∑–∞–º–µ—Ç–∫–∞</b>\n"
                f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.mention_html()}\n"
                f"<b>–ò–º—è:</b> #{name}")
    await log_action(message.chat.id, log_text, bot)
    
    await return_to_menu(message, state, get_notes_menu, bot)

@router.message(SettingsStates.waiting_for_note_name_to_delete)
async def process_del_note(message: types.Message, state: FSMContext, bot: Bot, log_action: callable):
    name = message.text.lower().split()[0]
    if await delete_note(message.chat.id, name):
        await message.answer(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ `#{name}` —É–¥–∞–ª–µ–Ω–∞.")
        log_text = (f"üóë <b>–£–¥–∞–ª–µ–Ω–∞ –∑–∞–º–µ—Ç–∫–∞</b>\n"
                    f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.mention_html()}\n"
                    f"<b>–ò–º—è:</b> #{name}")
        await log_action(message.chat.id, log_text, bot)
    else:
        await message.answer("–¢–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        
    await state.clear()
    text, keyboard = await get_notes_menu(message.chat.id)
    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¢—Ä–∏–≥–≥–µ—Ä–æ–≤ ---
@router.message(SettingsStates.waiting_for_trigger_keyword_to_add)
async def process_add_trigger_keyword(message: types.Message, state: FSMContext):
    await state.update_data(trigger_keyword=message.text.lower())
    await message.delete()
    menu_message_id = (await state.get_data()).get("menu_message_id")
    await bot.edit_message_text("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.", chat_id=message.chat.id, message_id=menu_message_id)
    await state.set_state(SettingsStates.waiting_for_trigger_response)

@router.message(SettingsStates.waiting_for_trigger_response)
async def process_add_trigger_response(message: types.Message, state: FSMContext, bot: Bot, log_action: callable):
    data = await state.get_data()
    keyword = data['trigger_keyword']
    response = message.html_text
    
    is_new = await add_trigger(message.chat.id, keyword, response)
    triggers_cache[message.chat.id] = await get_all_triggers(message.chat.id)
    status = "—Å–æ–∑–¥–∞–Ω" if is_new else "–æ–±–Ω–æ–≤–ª–µ–Ω"
    confirmation_msg = await message.answer(f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä –Ω–∞ —Ñ—Ä–∞–∑—É ¬´{keyword}¬ª —É—Å–ø–µ—à–Ω–æ {status}.")
    asyncio.create_task(delete_message_after_delay(confirmation_msg, 5))
    
    log_text = (f"ü§ñ <b>{status.capitalize()} —Ç—Ä–∏–≥–≥–µ—Ä</b>\n"
                f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.mention_html()}\n"
                f"<b>–§—Ä–∞–∑–∞:</b> {html.escape(keyword)}")
    await log_action(message.chat.id, log_text, bot)

    await return_to_menu(message, state, get_triggers_menu, bot)

@router.message(SettingsStates.waiting_for_trigger_keyword_to_delete)
async def process_del_trigger(message: types.Message, state: FSMContext, bot: Bot, log_action: callable):
    keyword = message.text.lower()
    if await delete_trigger(message.chat.id, keyword):
        triggers_cache[message.chat.id] = await get_all_triggers(message.chat.id)
        confirmation_msg = await message.answer(f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä –Ω–∞ —Ñ—Ä–∞–∑—É ¬´{keyword}¬ª —É–¥–∞–ª–µ–Ω.")
        asyncio.create_task(delete_message_after_delay(confirmation_msg, 5))
        log_text = (f"üóë <b>–£–¥–∞–ª–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä</b>\n"
                    f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.mention_html()}\n"
                    f"<b>–§—Ä–∞–∑–∞:</b> {html.escape(keyword)}")
        await log_action(message.chat.id, log_text, bot)
    else:
        error_msg = await message.answer("–¢–∞–∫–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        asyncio.create_task(delete_message_after_delay(error_msg, 5))
        
    await return_to_menu(message, state, get_triggers_menu, bot)

@router.callback_query(F.data.startswith("verify_"))
async def callback_verify_user(callback: types.CallbackQuery, bot: Bot):
    chat_id = callback.message.chat.id
    user_id_to_verify = int(callback.data.split("_")[1])
    
    if callback.from_user.id != user_id_to_verify:
        return await callback.answer("–≠—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å!", show_alert=True)
        
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—à–µ–¥—à–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫—É
    if chat_id not in VERIFIED_USERS:
        VERIFIED_USERS[chat_id] = set()
    VERIFIED_USERS[chat_id].add(user_id_to_verify)

    try:
        await bot.restrict_chat_member(
            chat_id=callback.message.chat.id,
            user_id=user_id_to_verify,
            permissions=types.ChatPermissions(
                can_send_messages=True, can_send_media_messages=True,
                can_send_other_messages=True, can_add_web_page_previews=True
            )
        )
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
        await callback.answer()
        
        # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π
        await callback.message.delete()
        
        # –ò –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        settings = await get_chat_settings(callback.message.chat.id)
        welcome_text = settings.get('welcome_message', "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç, {user_mention}!")
        final_text = welcome_text.replace("{user_mention}", callback.from_user.mention_html())
        await bot.send_message(callback.message.chat.id, final_text, parse_mode="HTML")

    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–¥–∞—Ç—å –≤–∞–º –ø—Ä–∞–≤–∞ –≤—Ä—É—á–Ω—É—é.", show_alert=True)
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
