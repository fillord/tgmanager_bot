# handlers/events.py
import logging
import asyncio
from datetime import timedelta
from aiogram import Router, F, types, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from db.requests import get_chat_settings, add_chat, update_reputation
from .filters import stop_words_cache
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫—ç—à
from .callbacks import VERIFIED_USERS

router = Router()

async def kick_if_not_verified(bot: Bot, chat_id: int, user_id: int, captcha_message_id: int, timeout: int):
    """
    –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç 'bot' –Ω–∞–ø—Ä—è–º—É—é.
    """
    logging.info(f"–ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –Ω–∞ {timeout} —Å–µ–∫. –¥–ª—è user {user_id} –≤ —á–∞—Ç–µ {chat_id}.")
    await asyncio.sleep(timeout)
    logging.info(f"–¢–∞–π–º–µ—Ä –¥–ª—è user {user_id} –∏—Å—Ç–µ–∫. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    if chat_id in VERIFIED_USERS and user_id in VERIFIED_USERS[chat_id]:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –ö–∏–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
        VERIFIED_USERS[chat_id].discard(user_id)
        if not VERIFIED_USERS[chat_id]:
            del VERIFIED_USERS[chat_id]
        return

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ù–ï –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ø—ã—Ç–∫–∞ –∫–∏–∫–∞...")
    try:
        await bot.ban_chat_member(chat_id, user_id, until_date=timedelta(seconds=60))
        await bot.delete_message(chat_id, captcha_message_id)
        logging.info(f"–£–°–ü–ï–•: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∫–∏–∫–Ω—É—Ç –∏–∑ —á–∞—Ç–∞ {chat_id} –∑–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—É—é –∫–∞–ø—á—É.")
    except Exception as e:
        logging.error(f"–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∫–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ —Ç–∞–π–º–∞—É—Ç—É: {e}")


@router.message(F.new_chat_members)
async def new_chat_member_handler(message: types.Message, bot: Bot):
    settings = await get_chat_settings(message.chat.id)
    
    bot_obj = await bot.get_me()
    if any(member.id == bot_obj.id for member in message.new_chat_members):
        await add_chat(message.chat.id)
        stop_words_cache[message.chat.id] = set()
        return await message.answer("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

    if not settings.get('captcha_enabled', False):
        welcome_text = settings.get('welcome_message', "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç, {user_mention}!")
        for member in message.new_chat_members:
            final_text = welcome_text.replace("{user_mention}", member.mention_html())
            await message.answer(final_text, parse_mode="HTML")
        return

    captcha_timeout = settings.get('captcha_timeout', 60)
    for member in message.new_chat_members:
        try:
            await bot.restrict_chat_member(
                chat_id=message.chat.id, user_id=member.id,
                permissions=types.ChatPermissions(can_send_messages=False)
            )
            
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(text="‚úÖ –Ø –Ω–µ –±–æ—Ç", callback_data=f"verify_{member.id}"))
            
            captcha_message = await message.answer(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.mention_html()}!\n\n"
                f"–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –≤ —Ç–µ—á–µ–Ω–∏–µ {captcha_timeout} —Å–µ–∫—É–Ω–¥.",
                parse_mode="HTML", reply_markup=keyboard.as_markup()
            )
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º 'bot' –∫–∞–∫ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –≤ –Ω–∞—à—É –∑–∞–¥–∞—á—É
            asyncio.create_task(
                kick_if_not_verified(bot, message.chat.id, member.id, captcha_message.message_id, captcha_timeout)
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –∫–∞–ø—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.id}: {e}")

@router.message(F.text.lower().in_({"—Å–ø–∞—Å–∏–±–æ", "+", "–¥—è–∫—É—é", "—Å–ø–∞—Å–∏–±—ñ", "thanks"}))
async def thanks_handler(message: types.Message):
    if not message.reply_to_message:
        return
    
    sender = message.from_user
    recipient = message.reply_to_message.from_user

    if sender.id == recipient.id:
        return
        
    await update_reputation(recipient.id, message.chat.id, 1)
    try:
        await message.reply_to_message.react([types.ReactionTypeEmoji(emoji="üëç")])
    except Exception:
        pass

@router.message(F.left_chat_member)
async def left_chat_member_handler(message: types.Message, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—â–∞–Ω–∏—è —Å —É—à–µ–¥—à–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.
    """
    # –ù–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —É—Ö–æ–¥ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
    bot_obj = await bot.get_me()
    if message.left_chat_member.id == bot_obj.id:
        return

    settings = await get_chat_settings(message.chat.id)
    goodbye_text = settings.get('goodbye_message')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
    if goodbye_text:
        final_text = goodbye_text.replace("{user_mention}", message.left_chat_member.mention_html())
        await message.answer(final_text, parse_mode="HTML")
