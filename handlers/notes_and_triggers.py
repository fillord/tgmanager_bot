# handlers/notes_and_triggers.py

import html
from aiogram import Router, F, types, Bot
from aiogram.filters import Command

from db.requests import (
    add_note, delete_note, get_note, get_all_notes,
    add_trigger, delete_trigger, get_all_triggers
)
# –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –ò–ó –ù–û–í–û–ì–û –§–ê–ô–õ–ê
from .utils import is_admin

router = Router()
# –ö—ç—à –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –ë–î –Ω–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
triggers_cache = {}

# --- –ó–ê–ú–ï–¢–ö–ò (NOTES) ---

@router.message(Command("addnote"))
async def cmd_add_note(message: types.Message, bot: Bot, log_action: callable):
    if not await is_admin(message, bot): return
    try:
        parts = message.text.split(maxsplit=2)
        name = parts[1].lower()
        content = parts[2]
        is_new = await add_note(message.chat.id, name, content)
        status = "—Å–æ–∑–¥–∞–Ω–∞" if is_new else "–æ–±–Ω–æ–≤–ª–µ–Ω–∞"
        await message.reply(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ `#{name}` —É—Å–ø–µ—à–Ω–æ {status}.")
        log_text = (f"üìù <b>{status.capitalize()} –∑–∞–º–µ—Ç–∫–∞</b>\n"
                    f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.mention_html()}\n"
                    f"<b>–ò–º—è:</b> #{name}")
        await log_action(message.chat.id, log_text, bot)
    except IndexError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addnote <–∏–º—è> <—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ>")

@router.message(Command("delnote"))
async def cmd_del_note(message: types.Message, bot: Bot, log_action: callable):
    if not await is_admin(message, bot): return
    try:
        name = message.text.split(maxsplit=1)[1].lower()
        if await delete_note(message.chat.id, name):
            await message.reply(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ `#{name}` —É–¥–∞–ª–µ–Ω–∞.")
            log_text = (f"üóë <b>–£–¥–∞–ª–µ–Ω–∞ –∑–∞–º–µ—Ç–∫–∞</b>\n"
                        f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.mention_html()}\n"
                        f"<b>–ò–º—è:</b> #{name}")
            await log_action(message.chat.id, log_text, bot)
        else:
            await message.reply("–¢–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except IndexError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delnote <–∏–º—è>")

@router.message(Command("notes"))
async def cmd_list_notes(message: types.Message):
    notes = await get_all_notes(message.chat.id)
    if not notes:
        return await message.reply("–í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
    text = "üìã **–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫:**\n" + "\n".join(f"‚Ä¢ `#{note}`" for note in notes)
    await message.reply(text, parse_mode="MarkdownV2")

@router.message(F.text.startswith("#"))
async def handle_note_call(message: types.Message):
    note_name = message.text[1:].lower().split()[0]
    if not note_name: return

    note_content = await get_note(message.chat.id, note_name)
    if note_content:
        # –°–ù–ê–ß–ê–õ–ê –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        if message.reply_to_message:
            # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–µ–≥–æ
            await message.reply_to_message.reply(note_content, parse_mode="HTML")
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
            await message.answer(note_content, parse_mode="HTML")
        
        # –ü–û–¢–û–ú —É–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        try:
            await message.delete()
        except Exception:
            pass

# --- –¢–†–ò–ì–ì–ï–†–´ (TRIGGERS) ---

@router.message(Command("addtrigger"))
async def cmd_add_trigger(message: types.Message, bot: Bot, log_action: callable):
    if not await is_admin(message, bot): return
    try:
        parts = message.text.split('"')
        keyword = parts[1].lower()
        response = parts[3]
        is_new = await add_trigger(message.chat.id, keyword, response)
        triggers_cache[message.chat.id] = await get_all_triggers(message.chat.id)
        status = "—Å–æ–∑–¥–∞–Ω" if is_new else "–æ–±–Ω–æ–≤–ª–µ–Ω"
        await message.reply(f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä –Ω–∞ —Ñ—Ä–∞–∑—É ¬´{keyword}¬ª —É—Å–ø–µ—à–Ω–æ {status}.")
        log_text = (f"ü§ñ <b>{status.capitalize()} —Ç—Ä–∏–≥–≥–µ—Ä</b>\n"
                    f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.mention_html()}\n"
                    f"<b>–§—Ä–∞–∑–∞:</b> {html.escape(keyword)}")
        await log_action(message.chat.id, log_text, bot)
    except IndexError:
        await message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addtrigger "–∫–ª—é—á–µ–≤–∞—è —Ñ—Ä–∞–∑–∞" "–æ—Ç–≤–µ—Ç"')

@router.message(Command("deltrigger"))
async def cmd_del_trigger(message: types.Message, bot: Bot, log_action: callable):
    if not await is_admin(message, bot): return
    try:
        keyword = message.text.split('"')[1].lower()
        if await delete_trigger(message.chat.id, keyword):
            triggers_cache[message.chat.id] = await get_all_triggers(message.chat.id)
            await message.reply(f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä –Ω–∞ —Ñ—Ä–∞–∑—É ¬´{keyword}¬ª —É–¥–∞–ª–µ–Ω.")
            log_text = (f"üóë <b>–£–¥–∞–ª–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä</b>\n"
                        f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.mention_html()}\n"
                        f"<b>–§—Ä–∞–∑–∞:</b> {html.escape(keyword)}")
            await log_action(message.chat.id, log_text, bot)
        else:
            await message.reply("–¢–∞–∫–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except IndexError:
        await message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /deltrigger "–∫–ª—é—á–µ–≤–∞—è —Ñ—Ä–∞–∑–∞"')

@router.message(Command("triggers"))
async def cmd_list_triggers(message: types.Message):
    if message.chat.id not in triggers_cache:
        triggers_cache[message.chat.id] = await get_all_triggers(message.chat.id)
    triggers = triggers_cache[message.chat.id]
    if not triggers:
        return await message.reply("–í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤.")
    text = "üìã **–°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:**\n" + "\n".join(f"‚Ä¢ ¬´`{html.escape(keyword)}`¬ª" for keyword in triggers)
    await message.reply(text, parse_mode="HTML")
