# handlers/user.py

import html
from aiogram import Router, types
from aiogram.filters import Command, CommandStart
from aiogram.utils.markdown import hbold

from db.requests import (
    get_or_create_user_profile, 
    get_chat_stats, 
    get_user_first_name,
    calculate_xp_for_next_level, # <-- –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
    get_top_users_by_xp,
    get_all_notes,      # <-- –ù–û–í–´–ô –ò–ú–ü–û–†–¢
    get_all_triggers,
    get_chat_settings    # <-- –ù–û–í–´–ô –ò–ú–ü–û–†–¢
)

# –°–æ–∑–¥–∞–µ–º "—Ä–æ—É—Ç–µ—Ä" –¥–ª—è –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
router = Router()

@router.message(CommandStart())
async def cmd_start(message: types.Message):
    if message.chat.type == 'private':
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø.")

@router.message(Command("stats"))
async def cmd_stats(message: types.Message):
    stats = await get_chat_stats(message.chat.id)
    
    top_users_text = []
    for i, user in enumerate(stats['top_users'], 1):
        user_id, msg_count = user
        first_name = await get_user_first_name(user_id)
        top_users_text.append(f"{i}. {html.escape(first_name)} - {msg_count} —Å–æ–æ–±—â.")

    text = [
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞</b>\n",
        f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <code>{stats['total']}</code>",
        f"–°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ 24 —á–∞—Å–∞: <code>{stats['last_24h']}</code>",
        "\n<b>–¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>",
        "\n".join(top_users_text) if top_users_text else "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    ]
    await message.answer("\n".join(text), parse_mode="HTML")

@router.message(Command("myrep"))
async def cmd_myrep(message: types.Message):
    profile = await get_or_create_user_profile(message.from_user.id, message.chat.id)
    await message.reply(f"–í–∞—à–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—è: {profile.reputation}")

@router.message(Command("userrep"))
async def cmd_userrep(message: types.Message):
    # –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º, –Ω–æ –ª–æ–≥–∏—á–Ω–µ–µ –µ–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
    if not message.reply_to_message:
        return await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    
    target_user = message.reply_to_message.from_user
    profile = await get_or_create_user_profile(target_user.id, message.chat.id)
    await message.reply(f"–†–µ–ø—É—Ç–∞—Ü–∏—è {hbold(target_user.full_name)}: {profile.reputation}", parse_mode="HTML")

@router.message(Command("rank"))
async def cmd_rank(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏ –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    profile = await get_or_create_user_profile(message.from_user.id, message.chat.id)
    xp_needed = calculate_xp_for_next_level(profile.level)
    
    text = (
        f"üèÜ –í–∞—à —Ä–∞–Ω–≥\n\n"
        f"<b>–£—Ä–æ–≤–µ–Ω—å:</b> {profile.level}\n"
        f"<b>–û–ø—ã—Ç:</b> {profile.xp} / {xp_needed}"
    )
    await message.reply(text, parse_mode="HTML")

@router.message(Command("top"))
async def cmd_top(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-10 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞."""
    top_users = await get_top_users_by_xp(message.chat.id, limit=10)
    
    if not top_users:
        return await message.reply("–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

    text = ["üèÜ <b>–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"]
    for i, profile in enumerate(top_users, 1):
        user_name = await get_user_first_name(profile.user_id)
        text.append(f"{i}. {html.escape(user_name)} - {profile.level} —É—Ä–æ–≤–µ–Ω—å ({profile.xp} XP)")
        
    await message.answer("\n".join(text), parse_mode="HTML")

@router.message(Command("notes"))
async def cmd_list_notes(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫."""
    notes = await get_all_notes(message.chat.id)
    if not notes:
        return await message.reply("–í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
    
    text = "üìã <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫:</b>\n\n" + "\n".join(
        f"‚Ä¢ <code>#{html.escape(note)}</code>" for note in notes
    )
    await message.reply(text, parse_mode="HTML")

@router.message(Command("triggers"))
async def cmd_list_triggers(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤."""
    triggers = await get_all_triggers(message.chat.id)
    if not triggers:
        return await message.reply("–í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤.")
    
    text = "ü§ñ <b>–°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:</b>\n\n" + "\n".join(
        f"‚Ä¢ <code>{html.escape(keyword)}</code>" for keyword in triggers
    )
    await message.reply(text, parse_mode="HTML")

@router.message(Command("rules"))
async def cmd_rules(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞."""
    settings = await get_chat_settings(message.chat.id)
    rules_text = settings.get('rules_text', '–ü—Ä–∞–≤–∏–ª–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.')
    await message.reply(rules_text, parse_mode="HTML")
