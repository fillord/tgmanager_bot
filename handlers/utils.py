# handlers/utils.py

from datetime import timedelta
from aiogram import Bot, types
from aiogram.enums import ChatMemberStatus
from aiogram.utils.markdown import hbold

from db.requests import add_warning, count_warnings, get_chat_settings

async def is_admin(message: types.Message, bot: Bot) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –æ—Ç–≤–µ—Ç–æ–º."""
    if message.chat.type == 'private':
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return False
    member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if member.status not in {ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR}:
        await message.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
        return False
    return True

async def is_user_admin_silent(chat: types.Chat, user_id: int, bot: Bot) -> bool:
    """–¢–∏—Ö–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π."""
    member = await bot.get_chat_member(chat.id, user_id)
    return member.status in {ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR}

async def process_warning(message: types.Message, user_to_warn: types.User, bot: Bot, log_action_func: callable):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏ –≤–∞—Ä–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –±–∞–Ω."""
    chat_id = message.chat.id
    user_id = user_to_warn.id
    
    await add_warning(user_id, chat_id)
    warnings_count = await count_warnings(user_id, chat_id)
    
    settings = await get_chat_settings(chat_id)
    warn_limit = settings.get('warn_limit', 3)
    
    admin_mention = message.from_user.mention_html()
    user_mention = user_to_warn.mention_html()

    if warnings_count >= warn_limit:
        try:
            await bot.ban_chat_member(chat_id, user_id, until_date=timedelta(days=1))
            await message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention} –ø–æ–ª—É—á–∏–ª {warnings_count} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ 1 –¥–µ–Ω—å.", parse_mode="HTML")
            log_text = (f"üö´ <b>–ê–≤—Ç–æ-–±–∞–Ω</b>\n<b>–ê–¥–º–∏–Ω:</b> {admin_mention}\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_mention} (<code>{user_id}</code>)\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π ({warnings_count}/{warn_limit})")
            await log_action_func(chat_id, log_text, bot)
        except Exception as e:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_mention}. –í–æ–∑–º–æ–∂–Ω–æ, —É –º–µ–Ω—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", parse_mode="HTML")
    else:
        await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_mention} –≤—ã–Ω–µ—Å–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ({warnings_count}/{warn_limit}).", parse_mode="HTML")
        log_text = (f"‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b>\n<b>–ê–¥–º–∏–Ω:</b> {admin_mention}\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_mention} (<code>{user_id}</code>)\n<b>–°—á–µ—Ç—á–∏–∫:</b> {warnings_count}/{warn_limit}")
        await log_action_func(chat_id, log_text, bot)
