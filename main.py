import asyncio
import os
import logging
from dotenv import load_dotenv

load_dotenv()

from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ —Ä–æ—É—Ç–µ—Ä—ã, –≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã–π 'events'
from handlers import user, admin, callbacks, events, notes_and_triggers, filters as msg_filters
from middlewares.antiflood import AntiFloodMiddleware
from db.requests import create_tables, upsert_user, get_or_create_user_profile, log_message, get_chat_settings, add_xp

logging.basicConfig(level=logging.INFO)

async def log_action(chat_id: int, text: str, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–ª—è —á–∞—Ç–∞ –∫–∞–Ω–∞–ª."""
    settings = await get_chat_settings(chat_id)
    log_channel_id = settings.get('log_channel_id')
    if log_channel_id:
        try:
            await bot.send_message(chat_id=log_channel_id, text=text, parse_mode="HTML")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –≤ –∫–∞–Ω–∞–ª {log_channel_id}: {e}")

async def on_startup(bot: Bot):
    await create_tables()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")

async def main():
    storage = MemoryStorage()
    bot = Bot(token=os.getenv("BOT_TOKEN"))
    dp = Dispatcher(storage=storage)

    # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –≤–æ –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–µ—Ä–µ–∑ data
    dp['log_action'] = log_action
    dp['bot'] = bot

    # --- MIDDLEWARE ---
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –ö–ê–ñ–î–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ
    @dp.message.middleware()
    async def user_register_middleware(handler, event: types.Message, data):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –∑–∞ –Ω–∏—Ö –Ω–µ –Ω–∞—á–∏—Å–ª—è–ª—Å—è –æ–ø—ã—Ç
        if event.text and event.text.startswith('/'):
            return await handler(event, data)

        bot = data['bot']
        await upsert_user(event.from_user)
        if event.chat.type != 'private':
            await get_or_create_user_profile(event.from_user.id, event.chat.id)
            await log_message(event.chat.id, event.from_user.id)
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_level, leveled_up = await add_xp(event.from_user.id, event.chat.id, 1) # 1 XP –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
            # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—Å–∏–ª—Å—è, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º
            if leveled_up:
                await event.answer(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º {event.from_user.mention_html()}, –≤—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {new_level} —É—Ä–æ–≤–Ω—è!", parse_mode="HTML")

        return await handler(event, data)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–Ω—Ç–∏—Ñ–ª—É–¥
    dp.message.middleware(AntiFloodMiddleware())

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(user.router)
    dp.include_router(admin.router)
    dp.include_router(callbacks.router)
    dp.include_router(events.router)
    dp.include_router(notes_and_triggers.router)
    # –§–∏–ª—å—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã
    dp.include_router(msg_filters.router)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é on_startup
    dp.startup.register(on_startup)

    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
