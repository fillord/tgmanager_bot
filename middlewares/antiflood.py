# middlewares/antiflood.py

import asyncio
import logging
from typing import Callable, Dict, Any, Awaitable
from collections import defaultdict
from datetime import timedelta
import time

from aiogram import BaseMiddleware
from aiogram.types import Message, ChatPermissions

user_messages = defaultdict(lambda: defaultdict(list))

class AntiFloodMiddleware(BaseMiddleware):
    MSG_LIMIT = 5
    TIME_LIMIT_SECONDS = 2
    MUTE_DURATION_MINUTES = 2

    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any]
    ) -> Any:
        
        # –ú–∏–¥–ª–≤–∞—Ä—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ dp.message, —Ç–∞–∫ —á—Ç–æ event –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç Message
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –≥—Ä—É–ø–ø—ã
        if event.chat.type not in ('group', 'supergroup'):
            return await handler(event, data)

        chat_id = event.chat.id
        user_id = event.from_user.id
        current_time = time.time()

        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞—Ä—à–µ TIME_LIMIT_SECONDS
        user_messages[chat_id][user_id] = [
            t for t in user_messages[chat_id][user_id] if current_time - t < self.TIME_LIMIT_SECONDS
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_messages[chat_id][user_id].append(current_time)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç
        if len(user_messages[chat_id][user_id]) >= self.MSG_LIMIT:
            # –î–æ–±–∞–≤–∏–º –ª–æ–≥, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –≤–∏–¥–µ—Ç—å —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ
            logging.info(f"!!! –û–ë–ù–ê–†–£–ñ–ï–ù –§–õ–£–î –æ—Ç user_id={user_id} –≤ chat_id={chat_id} !!!")
            try:
                # –°–Ω–∞—á–∞–ª–∞ –≤—ã–¥–∞–µ–º –º—É—Ç
                mute_duration = timedelta(minutes=self.MUTE_DURATION_MINUTES)
                await event.bot.restrict_chat_member(
                    chat_id=chat_id,
                    user_id=user_id,
                    permissions=ChatPermissions(can_send_messages=False),
                    until_date=mute_duration
                )
                
                # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã–∑–≤–∞–≤—à–µ–µ —Ñ–ª—É–¥
                await event.delete()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ
                msg = await event.answer(
                    f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.from_user.mention_html()} –∑–∞–º—É—á–µ–Ω –Ω–∞ {self.MUTE_DURATION_MINUTES} –º–∏–Ω—É—Ç –∑–∞ —Ñ–ª—É–¥.",
                    parse_mode="HTML"
                )
                await asyncio.sleep(10)
                await msg.delete()

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ –∞–Ω—Ç–∏-—Ñ–ª—É–¥–µ: {e}")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
            return
        
        # –ï—Å–ª–∏ —Ñ–ª—É–¥–∞ –Ω–µ—Ç, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
        return await handler(event, data)